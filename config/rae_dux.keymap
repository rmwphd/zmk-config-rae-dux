/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>


#define QWERTY_L 0
#define MINIMAK4_L 1
#define ISRT_L 2
#define NUMPAD_L 3
#define EDIT_L 4
#define FSYM_L 5
#define JSYM_L 6
#define MEDIA_L 7
#define ADJUST_L 8

#define R_UNDO      LG(Z)
#define R_REDO      LG(Y)
#define R_CUT       LG(X)
#define R_COPY      LG(C)
#define R_PASTE     LG(V)
#define R_SAVE      RG(S)
#define NEW_TAB     LG(T)
#define SWP_WND     LG(GRAVE)
#define R_HOME      LG(LEFT)
#define R_END       LG(RIGHT)
#define ZOOM_IN     LG(EQUAL)
#define ZOOM_OUT    LG(MINUS)
#define L_DSK       LC(LEFT)
#define R_DSK       LC(RIGHT)
#define DEL_WRD     LA(BSPC)
#define MVW_LEFT    LA(LEFT) 
#define MVW_RIGHT   LA(RIGHT)
#define SELW_LEFT   LA(RS(LEFT))
#define SELW_RIGHT  LA(RS(RIGHT))
#define TASK_MAN    LG(LA(ESCAPE))
#define SEL_HOME    RS(LG(LEFT))
#define SEL_END     RS(LG(RIGHT))
#define SEL_LEFT    RS(LEFT)
#define SEL_DOWN    RS(DOWN)
#define SEL_RIGHT   RS(RIGHT)
#define R_SCRNSHT   RS(RG(N4))
#define SFTCMD      RS(RGUI)
#define SEL_ALL     RG(A)
#define SWP_APP     RG(TAB)


&sk {
    release-after-ms = <900>;
    quick-release;
};

&lt { quick_tap_ms = <200>; };

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

/ {
    combos {
        compatible = "zmk,combos";

    // shortcut
    #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
          combo_##NAME { \
            timeout-ms = <TIMEOUT>; \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
          };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */

        COMBO(tab,     &kp TAB,    4 14,    30)
        COMBO(escape,  &kp ESCAPE, 0 10,    30)
        //COMBO(colon,   &kp COLON,  7 8,     30)
        COMBO(sqt,     &kp SQT,    9 19,    30)
        //COMBO(minus,   &kp MINUS,  31 32,   10)
        //COMBO(uscore,  &kp UNDER,  33 34,   10)
        COMBO(dskr,    &kp R_DSK,  19 29,   10)
        COMBO(dskl,    &kp L_DSK,  10 20,   10)
        //COMBO(equal, &kp EQUAL, 12 23, 100)
        //COMBO(enter, &kp ENTER, 17 26, 60)
        COMBO(reset_l, &bootloader, 0 1 2 3, 100)
        // COMBO(reset_right, &bootloader, 6 7 8 9, 100)
    };

    behaviors {
        bkfwd: backforward {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LG(LEFT)>, <&kp LG(RIGHT)>;
        };
        td1: cmd_opt_ctl {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&sk RGUI>, <&sk RALT>, <&sk RCTRL>;
        };
        td2: opt_cmd_ctl {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&sk RALT>, <&sk RGUI>, <&sk RCTRL>;
        };
        ht: hold-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
        shcaps: shcapslock {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&sk LSHIFT>, <&caps_word>;
        };
        // lhm: left_hand_positional_hold_tap {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "LEFT_POSITIONAL_HOLD_TAP";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <200>;
        //     quick-tap-ms = <125>;
        //     global-quick-tap;
        //     bindings = <&kp>, <&kp>;
        //     // hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        //     hold-trigger-key-positions = <5 6 7 8 9 10 11 12 13 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        // };
        // rhm: right_hand_positional_hold_tap {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "RIGHT_POSITIONAL_HOLD_TAP";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <200>;
        //     quick-tap-ms = <125>;
        //     global-quick-tap;
        //     bindings = <&kp>, <&kp>;
        //     // hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
        //     hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 16 17 18 19 20 21 22 23 24 30 31 32 33 34 35>;
        // };
        // base_lt: base_layer_hold_tap {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "BASE_LAYER_HOLD_TAP";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <200>;
        //     quick-tap-ms = <50>;
        //     global-quick-tap;
        //     bindings = <&mo>, <&kp>;
        // };
    };

	keymap {
		compatible = "zmk,keymap";

        // RSTHD nope, not brave enough lol
		default_layer {
            bindings = <
            &kp  Q    &kp  W         &kp  E     &kp  R        &kp  T                               &kp  Y    &kp  U        &kp  I        &kp  O     &kp  P           
            &kp  A    &lt NUMPAD_L S &kp  D     &lt FSYM_L  F &kp  G                               &kp  H    &lt JSYM_L J  &kp  K        &kp  L     &lt EDIT_L SEMI  
            &kp  Z    &kp  X         &kp  C     &kp  V        &kp  B                               &kp  N    &kp  M        &kp  COMMA    &kp  DOT   &lt MEDIA_L SLASH
            &td1  &lt EDIT_L BSPC   &shcaps         &kp ENTER  &lt NUMPAD_L SPACE      &td1  
            >;
        };

        minimak4_layer {
            bindings = <
            &kp  Q    &kp  W         &kp  D    &kp  R        &kp  K                     &kp  Y    &kp  U        &kp  I        &kp  O     &kp  P            
            &kp  A    &lt NUMPAD_L S &kp  T    &lt FSYM_L  F &kp  G                     &kp  H    &lt JSYM_L J  &kp  E        &kp  L     &lt EDIT_L SEMI   
            &kp  Z    &kp  X         &kp  C    &kp  V        &kp  B                     &kp  N    &kp  M        &kp  COMMA    &kp  DOT   &lt MEDIA_L SLASH 
            &trans     &trans    &trans         &trans  &trans  &trans  
            >;
        };

        isrt_layer {
            bindings = <
            &kp  Q    &kp  W         &kp  D    &kp  R        &kp  K                          &kp  Z    &kp  F        &kp  U      &kp  SLASH &kp SEMI       
            &kp  I    &lt NUMPAD_L S &kp  R    &lt FSYM_L  T &kp  G                          &kp  P    &lt JSYM_L N  &kp  E      &kp  A     &lt EDIT_L O   
            &kp  Y    &kp  V         &kp  W    &kp  D        &kp  J                          &kp  B    &kp  H        &kp  COMMA  &kp  DOT   &lt MEDIA_L X  
            &trans     &trans    &trans         &trans  &trans  &trans  
            >;
        };

        num_layer {
            bindings = <
            &trans     &trans    &kp UP     &trans      &trans                  &trans   &kp  N7   &kp  N8   &kp  N9     &kp  MINUS 
            &trans     &kp LEFT  &kp DOWN   &kp RIGHT   &trans                  &trans   &kp  N4   &kp  N5   &kp  N6     &kp  PLUS  
            &kp R_UNDO &kp R_CUT &kp R_COPY &kp R_PASTE &kp R_REDO              &kp N0   &kp  N1   &kp  N2   &kp  N3     &kp  DOT   
            &trans &trans &trans                  &trans  &trans  &kp DOT   

            >;
        };

        edit_layer {
            bindings = <
            &kp TASK_MAN &kp SWP_WND    &kp SELW_LEFT &kp SELW_RIGHT &trans                     &kp NEW_TAB &kp PG_UP &kp UP &kp PG_DN &kp PSCRN
            &kp SEL_ALL  &kp R_SAVE     &kp MVW_LEFT  &kp MVW_RIGHT  &trans                     &kp  R_HOME  &kp LEFT &kp DOWN &kp RIGHT &kp R_END
            &kp R_UNDO   &kp R_CUT &kp R_COPY    &kp R_PASTE    &kp R_REDO                       &kp SEL_HOME &kp SEL_LEFT &kp SEL_DOWN &kp SEL_RIGHT &kp SEL_END
            &trans  &trans  &trans                                                   &trans  &trans  &trans
            >;
        };

        fsym_layer {
            bindings = <
            &trans  &trans  &trans &trans &trans                                &kp CARET &kp AMPS   &kp ASTRK   &kp GRAVE  &trans
            &trans  &kp TILDE &kp EXCL &trans &trans                            &kp EQUAL &kp MINUS  &kp UNDER   &kp BSLH   &kp COLON
            &trans  &trans  &trans &trans &trans                                &trans    &kp PLUS   &kp SLASH   &kp PIPE   &trans  
            &trans &kp DEL_WRD &trans               &trans &trans &trans 
            >;
        };
        
        jsym_layer {
            bindings = <
            &kp GRAVE &kp AT    &kp LBRC &kp RBRC  &trans                         &trans &trans &trans &trans &trans 
            &kp HASH  &kp DLLR  &kp LPAR &kp RPAR  &kp LEFT                  &trans &trans &kp QMARK &kp SLASH &kp COLON 
            &kp PRCNT &kp CARET &kp LBKT &kp RBKT  &trans                     &trans &trans &trans &trans &trans  
            &trans    &trans   &trans               &trans &trans &trans
            >;
        };      

        media_layer {
            bindings = <
            &kp F1 &kp F2 &kp F3 &kp F4  &kp F5                                         &trans &trans &trans &trans &trans
            &kp F6 &kp F7 &kp F8 &kp F9 &kp F10                                         &trans &trans &trans &trans &trans
            &trans &trans &trans &trans  &trans                                         &kp R_SCRNSHT &kp C_VOL_DN &kp K_MUTE &kp C_VOL_UP  &trans  
            &trans  &trans  &trans            &kp C_PREV  &kp C_PP   &kp C_NEXT 
            >;
        };


        adj_layer {
            bindings = <
            &to  QWERTY_L &to  MINIMAK4_L &to  ISRT_L &none         &none                                         &none      &kp PRINTSCREEN    &none         &none  &none
            &bt  BT_SEL 0 &bt  BT_SEL 1 &bt  BT_SEL 2 &bt  BT_SEL 3 &bt  BT_SEL 4                           &none      &none              &none         &none              &none    
            &reset        &none         &out OUT_USB  &out OUT_BLE  &none                                               &none      &none              &none         &none              &none         
            &trans        &trans        &trans                               &bt BT_CLR    &trans     &trans     
            >;
        };

	};
};
